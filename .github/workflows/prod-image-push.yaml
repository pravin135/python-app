# .github/workflows/promote-to-prod.yaml
name: Promote to Production

on:
  workflow_dispatch:
    # Optional inputs for manual promotion, e.g., to override the default image tag
    inputs:
      image_tag:
        description: 'Optional: Specific image tag to promote (e.g., commit SHA or release version)'
        required: false
jobs:
  promote:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required for Workload Identity Federation (GCP)
      contents: write # Required to commit changes to the repo
    
    steps:
      - name: Checkout stage branch (to get current stage image)
        uses: actions/checkout@v4
        with:
          ref: stage
          fetch-depth: 0 # Needed to read the manifests/stage/deployment.yaml

      - name: Extract image details from staging deployment
        id: extract_stage_image
        run: |
          # Use yq (or similar robust YAML parser) for safer extraction
          # Install yq: sudo snap install yq (or brew install yq)
          # Assuming `image: gar-stage/my-app:v1.0.0-abcd`
          FULL_STAGE_IMAGE=$(yq '.spec.template.spec.containers[0].image' manifests/stage/deployment.yaml)
          echo "Full stage image: $FULL_STAGE_IMAGE"
          
          # Extract repository (gar-stage/my-app) and tag (v1.0.0-abcd)
          STAGE_REPO=$(echo "$FULL_STAGE_IMAGE" | cut -d':' -f1) # gar-stage/my-app
          STAGE_TAG=$(echo "$FULL_STAGE_IMAGE" | cut -d':' -f2) # v1.0.0-abcd
          PROD_REPO=$(echo "$STAGE_REPO" | \
                      sed 's|praveen-345|shared-vpc-service-315|' | \
                      sed 's|python-app/python-app|prod-python-app/prod-app|')
          # Use the same tag for consistency, or generate a new one if preferred
          PROD_TAG="${{ inputs.image_tag || env.STAGE_TAG }}" # Use input if provided, else use stage tag

          NEW_PROD_IMAGE="${PROD_REPO}:${PROD_TAG}"
          echo "STAGE_REPO=$STAGE_REPO" >> $GITHUB_ENV
          echo "STAGE_TAG=$STAGE_TAG" >> $GITHUB_ENV
          echo "PROD_REPO=$PROD_REPO" >> $GITHUB_ENV
          echo "PROD_TAG=$PROD_TAG" >> $GITHUB_ENV
          echo "NEW_PROD_IMAGE=$NEW_PROD_IMAGE" >> $GITHUB_ENV

          echo "Image to promote (original): $FULL_STAGE_IMAGE"
          echo "New production image will be: $NEW_PROD_IMAGE"

      - name: Authenticate to GCP using Workload Identity Federation
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/701983950006/locations/global/workloadIdentityPools/gh-prod-pool/providers/gh-prod-provider 
          service_account: github-actions-sa@shared-vpc-service-315.iam.gserviceaccount.com
      - name: Configure gcloud
        run: |
          gcloud config set project $PROJECT_ID
          gcloud auth configure-docker asia-south1-docker.pkg.dev

      - name: Pull image from staging GAR
        run: docker pull ${{ env.STAGE_REPO }}:${{ env.STAGE_TAG }}

      - name: Tag image for production GAR
        run: docker tag ${{ env.STAGE_REPO }}:${{ env.STAGE_TAG }} ${{ env.NEW_PROD_IMAGE }}

      - name: Push image to production GAR
        run: docker push ${{ env.NEW_PROD_IMAGE }}

      - name: Checkout main branch (for updating prod manifest)
        uses: actions/checkout@v4
        with:
          ref: main
          path: main-branch

      - name: Update prod deployment with new production image
        run: |
          # Use yq for safer updates
          cd main-branch
          yq e '.spec.template.spec.containers[0].image = "${{ env.NEW_PROD_IMAGE }}"' -i manifests/prod/deployment.yaml

      - name: Commit and push to main
        run: |
          cd main-branch
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add manifests/prod/deployment.yaml
          git commit -m "Promote image to prod: ${{ env.NEW_PROD_IMAGE }} [ci skip]" || echo "No changes to commit"
          git push origin main


